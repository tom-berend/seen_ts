// A Quaterionion class for computing quaterion multiplications. This creates
// more natural mouse rotations.
//
// Attribution: adapted from http://glprogramming.com/codedump/godecho/quaternion.html
class Quaternion {
  x:number;
  y:number;
  z:number;
  w:number;

  // constructor : ->
  // this.q = seen.P(arguments...)


  constructor(x:number,y:number,z:number,w:number):void{
    this.x = x;
    this.y = y;
    this.z = z;
    this.w = w;
  }

  const pixelsPerRadian = 150

  // Convert the x and y pixel offsets into a rotation matrix
  xyToTransform(x:number, y:number):number[] {
    let quatX = this.pointAngle(seen.Points.Y(), x / seen.Quaternion.pixelsPerRadian)
    let quatY = this.pointAngle(seen.Points.X(), y / seen.Quaternion.pixelsPerRadian)
    return quatX.multiply(quatY).toMatrix()
  }

  // Create a rotation matrix from the axis defined by x, y, and z values, and the supplied angle.
  axisAngle (axis:V3 angleRads:number):Quaternion {
    let scale = Math.sin(angleRads / 2.0)
    let w     = Math.cos(angleRads / 2.0)
    return new Quaternion(scale * axis.x, scale * axis.y, scale * axis.z, w)
  }

  // Create a rotation matrix from the axis defined by the supplied point and the supplied angle.
  pointAngle (p:Point, angleRads:Angle):Quaternion {
    scale = Math.sin(angleRads / 2.0)
    w     = Math.cos(angleRads / 2.0)
    return new seen.Quaternion(scale * p.x, scale * p.y, scale * p.z, w)
  }

  // Multiply this `Quaterionion` by the `Quaternion` argument.
  multiply : (q) ->
    r = seen.P()

    r.w = this.q.w * q.q.w - this.q.x * q.q.x - this.q.y * q.q.y - this.q.z * q.q.z
    r.x = this.q.w * q.q.x + this.q.x * q.q.w + this.q.y * q.q.z - this.q.z * q.q.y
    r.y = this.q.w * q.q.y + this.q.y * q.q.w + this.q.z * q.q.x - this.q.x * q.q.z
    r.z = this.q.w * q.q.z + this.q.z * q.q.w + this.q.x * q.q.y - this.q.y * q.q.x

    result = new seen.Quaternion()
    result.q = r
    return result

  // Convert this `Quaterion` into a transformation matrix.
  toMatrix : ->
    m = new Array(16)

    m[ 0] = 1.0 - 2.0 * ( this.q.y * this.q.y + this.q.z * this.q.z )
    m[ 1] = 2.0 * ( this.q.x * this.q.y - this.q.w * this.q.z )
    m[ 2] = 2.0 * ( this.q.x * this.q.z + this.q.w * this.q.y )
    m[ 3] = 0.0

    m[ 4] = 2.0 * ( this.q.x * this.q.y + this.q.w * this.q.z )
    m[ 5] = 1.0 - 2.0 * ( this.q.x * this.q.x + this.q.z * this.q.z )
    m[ 6] = 2.0 * ( this.q.y * this.q.z - this.q.w * this.q.x )
    m[ 7] = 0.0

    m[ 8] = 2.0 * ( this.q.x * this.q.z - this.q.w * this.q.y )
    m[ 9] = 2.0 * ( this.q.y * this.q.z + this.q.w * this.q.x )
    m[10] = 1.0 - 2.0 * ( this.q.x * this.q.x + this.q.y * this.q.y )
    m[11] = 0.0

    m[12] = 0
    m[13] = 0
    m[14] = 0
    m[15] = 1.0
    return seen.M(m)
}