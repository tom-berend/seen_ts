DEFAULT_NORMAL = seen.Points.Z();
var seen = (function () {
    function seen() {
    }
    return seen;
}());
RenderModel;
constructor: (this.surface, this.transform, this.projection, this.viewport) 
    this.points;
this.surface.points;
this.transformed = this._initRenderData();
this.projected = this._initRenderData();
this._update();
update: (transform, projection, viewport) -  >
;
if (not)
    this.surface.dirty;
and;
seen.Util.arraysEqual(transform.m, this.transform.m);
and;
seen.Util.arraysEqual(projection.m, this.projection.m);
and;
seen.Util.arraysEqual(viewport.m, this.viewport.m);
return;
this.transform = transform;
this.projection = projection;
this.viewport = viewport;
this._update();
_update: () -  >
    this._math(this.transformed, this.points, this.transform, false);
cameraSpace = this.transformed.points.map(p);
p.copy().transform(this.projection);
this.inFrustrum = this._checkFrustrum(cameraSpace);
this._math(this.projected, cameraSpace, this.viewport, true);
this.surface.dirty = false;
_checkFrustrum: (points) -  >
;
for (p in points)
    return false;
if (p.z <= -2)
    return true;
_initRenderData: - >
;
return {
    points: (p.copy()), "for": p in this.points,
    bounds: new seen.Bounds(),
    barycenter: seen.P(),
    normal: seen.P(),
    v0: seen.P(),
    v1: seen.P()
};
_math: (set, points, transform, applyClip = false) -  >
;
for (p, i in points)
    sp = set.points[i];
sp.set(p).transform(transform);
if (applyClip)
    then;
sp.divide(sp.w);
set.barycenter.multiply(0);
for (p in set.points)
    set.barycenter.add(p);
set.barycenter.divide(set.points.length);
set.bounds.reset();
for (p in set.points)
    set.bounds.add(p);
if (set.points.length < 2)
    set.v0.set(DEFAULT_NORMAL);
set.v1.set(DEFAULT_NORMAL);
set.normal.set(DEFAULT_NORMAL);
set.v0.set(set.points[1]).subtract(set.points[0]);
set.v1.set(set.points[points.length - 1]).subtract(set.points[0]);
set.normal.set(set.v0).cross(set.v1).normalize();
var seen = (function () {
    function seen() {
    }
    return seen;
}());
LightRenderModel;
constructor: (this.light, transform) -  >
    this.colorIntensity;
this.light.color.copy().scale(this.light.intensity);
this.type = this.light.type;
this.intensity = this.light.intensity;
this.point = this.light.point.copy().transform(transform);
origin = seen.Points.ZERO().transform(transform);
this.normal = this.light.normal.copy().transform(transform).subtract(origin).normalize();
//# sourceMappingURL=model.js.map