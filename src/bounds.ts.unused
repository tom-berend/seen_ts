import {P,Point} from './point'


/** The `Bounds` object contains an axis-aligned bounding box. */
class Bounds{
  public min:number = null;
  public max:number = null;
  public valid:boolean = false;

  constructor  () {
  }

  /** create a bounding box for an array of points */
  points (points:Point[]) {
    let box = new Bounds()
    points.forEach(p => box.add(p);
    return box
  }

  /** create a bounding box from homogeneous coordinates (x,y,z,h) */
  xywh (x:number, y:number, w:number, h:number) {
    return this.xyzwhd(x, y, 0, w, h, 0)
  }

  xyzwhd (x:number, y:number, z:number, w:number, h:number, d:number) {
    let box = new Bounds();
    box.add(P(x,y,z));
    box.add(P(x+w, y+h ,z+d ));
    box.add(P(x, y, z))
    box.add(P(x+w, y+h, z+d))
    return box
  }

  /** Creates a copy of this box object with the same bounds */
  copy  () {
    let box = new Bounds()
    box.min = this.min
    box.max = this.max
    return box
  }

  // Adds this point to the bounding box, extending it if necessary
  add (p:Point) {
    if  (!(this.min && this.max)){
      this.min = p.copy()
      this.max = p.copy()
    }
    else
     { this.min.x = Math.min(this.min.x, p.x)
      this.min.y = Math.min(this.min.y, p.y)
      this.min.z = Math.min(this.min.z, p.z)

      this.max.x = Math.max(this.max.x, p.x)
      this.max.y = Math.max(this.max.y, p.y)
      this.max.z = Math.max(this.max.z, p.z)
     }
    return this.
  }

  // Returns true of this box contains at least one point
  valid : ->
    return (this.min? and this.max?)

  // Trims this box so that it results in the intersection of this box and the
  // supplied box.
  intersect : (box) ->
    if not this.valid() or not box.valid()
      this.min = null
      this.max = null
    else
      this.min = seen.P(
        Math.max(this.min.x, box.min.x)
        Math.max(this.min.y, box.min.y)
        Math.max(this.min.z, box.min.z)
      )
      this.max = seen.P(
        Math.min(this.max.x, box.max.x)
        Math.min(this.max.y, box.max.y)
        Math.min(this.max.z, box.max.z)
      )
      if this.min.x > this.max.x or this.min.y > this.max.y or this.min.z > this.max.z
        this.min = null
        this.max = null
    return this.


  // Pads the min and max of this box using the supplied x, y, and z
  pad : (x, y, z) ->
    if this.valid()
      y ?= x
      z ?= y
      p  = seen.P(x,y,z)
      this.min.subtract(p)
      this.max.add(p)
    return this.

  // Returns this bounding box to an empty state
  reset : () ->
    this.min = null
    this.max = null
    return this.

  // Return true iff the point p lies within this bounding box. Points on the
  // edge of the box are included.
  contains : (p) ->
    if not this.valid()
      return false
    else if this.min.x > p.x or this.max.x < p.x
      return false
    else if this.min.y > p.y or this.max.y < p.y
      return false
    else if this.min.z > p.z or this.max.z < p.z
      return false
    else
      return true

  // Returns the center of the box or zero if no points are in the box
  center : () ->
    return seen.P(
      this.minX() + this.width()/2
      this.minY() + this.height()/2
      this.minZ() + this.depth()/2
    )

  // Returns the width (x extent) of the box
  width  : () => this.maxX() - this.minX()

  // Returns the height (y extent) of the box
  height : () => this.maxY() - this.minY()

  // Returns the depth (z extent) of the box
  depth  : () => this.maxZ() - this.minZ()

  minX : () => return this.min?.x ? 0
  minY : () => return this.min?.y ? 0
  minZ : () => return this.min?.z ? 0

  maxX : () => return this.max?.x ? 0
  maxY : () => return this.max?.y ? 0
  maxZ : () => return this.max?.z ? 0

}